# Default values for mysql.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here:
# https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here:
# https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: postgres
  # This sets the pull policy for images.
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "{{version_tag}}"

# This is for the secretes for pulling an image from a private repository more
# information can be found here:
# https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: "{{deployment_name}}"
fullnameOverride: "{{deployment_name}}"

# #This section builds out the service account more information can be found
# here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use. If not set and create is true, a
  # name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout:
# https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout:
# https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

env:
  POSTGRES_DB: {{db_name}}
  POSTGRES_PASSWORD: {{db_user_password}}
  POSTGRES_USER: {{db_user_name}}
  TZ: US/Pacific
  PGDATA: /var/lib/postgresql/data/pgdata

podSecurityContext:
  fsGroup: {{nersc_user_group}}

securityContext:
  capabilities:
    add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    drop:
      - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: {{nersc_user_id}}

# This is for setting up a service more information can be found here:
# https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here:
  # https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here:
  # https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 5432

persistentVolumeClaims:
  testdb:
    existing: false

# Additional volumeMounts on the output Deployment definition.
volumes:
  - name: {{deployment_name}}
    persistentVolumeClaim:
      claimName: {{deployment_name}}

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - mountPath: /var/lib/postgresql/data
    name: {{deployment_name}}

# This block is for setting up the ingress for more information can be found
# here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as
  # a conscious choice for the user. This also increases chances charts run on
  # environments with little resources, such as Minikube. If you do want to
  # specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after
  # 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# # This is to setup the liveness and readiness probes more information can be found here:
# # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
# livenessProbe:
#   httpGet:
#     path: /
#     port: http
# readinessProbe:
#   httpGet:
#     path: /
#     port: http

# TODO: The probe examples above will only work for SQL servers. Add something
# like this to make liveliness and readiness probes work with SQL:
# https://stackoverflow.com/questions/67905245/mysql-kubernetes-deployment-helm-chart-fails-with-readiness-and-liveness-probe-f
# livenessProbe:
#   exec:
#     command: ["mysqladmin", "ping"]
#   initialDelaySeconds: 30
#   periodSeconds: 10
#   timeoutSeconds: 5
# readinessProbe:
#   exec:
#     # Check we can execute queries over TCP (skip-networking is off).
#     command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
#   initialDelaySeconds: 5
#   periodSeconds: 2
#   timeoutSeconds: 1
# NOTE: needs to be in templates/deployment.yaml, as we need the user name and
# password to the db

# This section is for setting up autoscaling more information can be found here:
# https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
